from aiogram import Router, types, F
from aiogram.filters import CommandStart
import logging
import asyncio
from core.parser import parse_car_data
from core.calculator import calculate_total_cost

router = Router()


@router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ Avito.")


@router.message(F.text.startswith("http"))
async def handle_link(message: types.Message):
    url = message.text.strip()
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Å—Å—ã–ª–∫—É: {url}")
    await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        car_info = await asyncio.to_thread(parse_car_data, url)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return

    if not car_info:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Å—ã–ª–∫–µ.")
        return

    try:
        final_cost = calculate_total_cost(car_info)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ: {e}")
        return

    response = (
        f"üöò {car_info['brand']} {car_info['model']}, {car_info['year']} –≥.\n"
        f"üí∞ –¶–µ–Ω–∞: {car_info['price']:,} ‚ÇΩ\n\n"
        f"+ –î–æ—Å—Ç–∞–≤–∫–∞: {final_cost['delivery']:,} ‚ÇΩ\n"
        f"+ –¢–∞–º–æ–∂–Ω—è: {final_cost['customs']:,} ‚ÇΩ\n"
        f"+ –£—Ç–∏–ª–∏–∑–∞—Ü–∏—è: {final_cost['utilization']:,} ‚ÇΩ\n\n"
        f"üíµ –ò—Ç–æ–≥–æ: {final_cost['total']:,} ‚ÇΩ"
    )
    await message.answer(response)
